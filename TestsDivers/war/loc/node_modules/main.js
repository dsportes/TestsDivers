// 'use strict';

const APP = {};
APP.Server = class Server {
	constructor(url){
		this.url = url;
	}
	static option(){
		console.log("static S " + this.name);
		return "toto";
	}
	print(){
		console.log("instance S " + this.constructor.name);
		return this.constructor.option() + this.url;
	}
};
APP.SubServer = class SubServer extends APP.Server {
	constructor(url){
		super(url);
	}
	static option(){
		console.log("static SS " + this.name);
		return "tata";
	}
	print(){
		console.log("instance SS " + this.constructor.name);
		// return "sub" + APP.Server.option() + this.url;
		return "sub" + super.print();
	}
}

APP.Document = class Document {
	static get(clazz) {
		const args = Array.prototype.slice.call(arguments, 1);
		const key = args.join("/") + "@" + clazz;
		let d = GEN.documents[key];
		if (d) return d;
		d = new APP[clazz];
		d.args = args;
		d.key = key;
		GEN.documents[key] = d;
		return d;
	}
	
}

APP.StoredDocument = class StoredDocument {	
	
}

APP.CompDocument = class StoredDocument {	
	
}

APP.Repertoire = class Repertoire extends APP.StoredDocument {
	static get(groupid, docid, filter) { return APP.Document.get(this.name, groupid, docid, filter); }
	
}

GEN = {documents : {}};
console.log("SS name " + APP.SubServer.name);
const d1 = APP.Repertoire.get("a", "rep1", "");
const d2 = APP.Repertoire.get("a", "rep2", "");
const d3 = APP.Repertoire.get("a", "rep1", "");


const hw = document.getElementById("hw");
const hw2 = document.getElementById("hw2");
hw.addEventListener("click", function() {
	const srv = new APP.Server("titi");
	if (srv instanceof APP.Server)
		console.log("srv hérite de Server");
	hw.innerHTML = srv.print();
	// const srv2 = Object.assign(new APP.Server(""), {url:"tutu"});
	const srv2 = Object.assign(new APP.SubServer(""), {url:"tutu"});
	if (srv2 instanceof APP.Server)
		console.log("srv2 hérite de SubServer");
	if (srv2 instanceof APP.SubServer)
		console.log("srv2 hérite de Server");
	hw2.innerHTML = srv2.print();
});